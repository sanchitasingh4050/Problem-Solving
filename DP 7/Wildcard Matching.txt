class Solution {
public:
    bool isMatch(string s, string p) {
        int n1 = s.size(), n2 = p.size();
        
        // dp[i][j] will be true if the first i characters in s can match the first j characters in p
        vector<vector<bool>> dp(n1 + 1, vector<bool>(n2 + 1, false));
        
        // Empty string matches with empty pattern
        dp[0][0] = true;
        
        // Handling patterns with leading '*'
        for (int j = 1; j <= n2; j++) {
            if (p[j - 1] == '*') {
                dp[0][j] = dp[0][j - 1];
            }
        }
        
        // Filling the dp table
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                if (p[j - 1] == '*') {
                    // '*' can match zero or more characters in s
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                } else if (p[j - 1] == '?' || s[i - 1] == p[j - 1]) {
                    // '?' matches any single character or characters match directly
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        
        return dp[n1][n2];
    }
};