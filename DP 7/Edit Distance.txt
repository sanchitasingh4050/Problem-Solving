class Solution { //dp space optimised
public:
    int minDistance(string word1, string word2) {
        int word1_size = word1.length();
        int word2_size = word2.length();

        if (word1_size == 0) return word2_size; // If word1 is empty, insert all characters from word2
        if (word2_size == 0) return word1_size; // If word2 is empty, remove all characters from word1

        // Initializing the first row of dp array
        vector<int> dp_prev(word2_size + 1);
        for (int j = 0; j <= word2_size; ++j)
            dp_prev[j] = j;

        // Initializing variables to store the previous and current rows of dp array
        vector<int> dp_curr(word2_size + 1);

        for (int i = 1; i <= word1_size; ++i) {
            // Initializing the first column of dp_curr array
            dp_curr[0] = i;

            for (int j = 1; j <= word2_size; ++j) {
                if (word1[i - 1] == word2[j - 1])
                    dp_curr[j] = dp_prev[j - 1]; // No operation needed
                else
                    dp_curr[j] = min({dp_prev[j - 1], dp_prev[j], dp_curr[j - 1]}) + 1; // Choose minimum among replace, remove, add
            }

            // Updating dp_prev to dp_curr for the next iteration
            dp_prev = dp_curr;
        }

        return dp_curr[word2_size]; // Returning the last element of dp_curr array as the ans
    }
};


/*
class Solution { //using dp
public:
    int minDistance(string word1, string word2) {
        const int word1_size = word1.length(); 
        const int word2_size = word2.length(); 
        
        vector<vector<int>> dp(word1_size + 1, vector<int>(word2_size + 1));
        // dp[i][j] represents the minimum number of operations required to convert word1[0..i) to word2[0..j)
        
        // Base cases:
        // Initializing dp[i][0] with the number of operations required to convert word1[0..i) to an empty string
        for (int i = 1; i <= word1_size; ++i)
            dp[i][0] = i; 
        
        // Initializing dp[0][j] with the number of operations required to convert an empty string to word2[0..j)
        for (int j = 1; j <= word2_size; ++j)
            dp[0][j] = j; 
        
       
        for (int i = 1; i <= word1_size; ++i) {
            for (int j = 1; j <= word2_size; ++j) {
                if (word1[i - 1] == word2[j - 1]) // If the characters at positions (i-1) and (j-1) are equal
                    dp[i][j] = dp[i - 1][j - 1]; // No operation needed, answer is the same as the previous state
                else
                    dp[i][j] = min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]}) + 1;
             // If characters are not equal, choose the minimum among replacing, removing, or adding a character
            }
        }
        
        return dp[word1_size][word2_size]; //answer
    }
};
*/






/*
class Solution { // memoization
private:
    int minDistanceHelper(string word1, string word2, int i, int j, vector<vector<int>>& dp) {
        if (i == -1) {
            return j+1; //length from 0 to j
        }
        if (j == -1) {
            return i+1; //lrngth from 0 to i
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int ans = INT_MAX;
        if (word1[i] == word2[j]) {
            ans = minDistanceHelper(word1, word2, i - 1, j - 1, dp);
        } else {
            int dist1_replace = minDistanceHelper(word1, word2, i - 1, j - 1, dp);
            int dist2_add= minDistanceHelper(word1, word2, i, j - 1, dp);
            int dist3_remove = minDistanceHelper(word1, word2, i - 1, j, dp);
            ans = min(dist1_replace, min(dist2_add, dist3_remove)) + 1;
        }

        dp[i][j] = ans;
        return dp[i][j];
    }

public:
    int minDistance(string word1, string word2) {
        vector<vector<int>> dp(word1.length() + 1, vector<int>(word2.length() + 1, -1));
        int word1_size=word1.length()-1;
        int word2_size=word2.length()-1;

        return minDistanceHelper(word1, word2, word1_size, word2_size, dp);
    }
};
 */




 /*
 class Solution { //using recursion
 private:
     int minDistanceHelper(string word1, string word2, int i, int j){
        if(i == -1){
             return j+1; //j+1 => length from 0 to j
         }
        if(j == -1){
             return i+1; //i+1 =>length from 0 to i
         }

         if(word1[i] == word2[j]){
             return minDistanceHelper(word1, word2, i-1, j-1);
        }

         int dist1_replace = minDistanceHelper(word1, word2, i-1, j-1);
         int dist2_add = minDistanceHelper(word1, word2, i, j-1); //adding in word1 (just assuming hypothetically)
         int dist3_remove = minDistanceHelper(word1, word2, i-1, j); //remove from word1
          
         return min(dist1_replace, min(dist2_add, dist3_remove)) + 1;
     }
 public:
     int minDistance(string word1, string word2) {
        int word1_size=word1.length()-1; //for comparing from last indexes
        int word2_size=word2.length()-1;
         return minDistanceHelper(word1, word2, word1_size, word2_size); //using two pointers for word1 and word2
     }
 }; 
 */