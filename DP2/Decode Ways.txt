class Solution { //dp
public:
    int numDecodings(string s) {
        if (s.empty() || s[0] == '0') return 0; // No valid decodings if string is empty or starts with '0'
        
        int n = s.size();
        vector<int> dp(n + 1, 0);
        
        dp[0] = 1; // Base case: empty string has one way to decode
        dp[1] = s[0] == '0' ? 0 : 1; // Single character decoding
        
        for (int i = 2; i <= n; ++i) {
            // Checking the last one character
            if (s[i-1] != '0') {
                dp[i] += dp[i-1];
            }
            // Checking the last two characters
            int twoDigit = stoi(s.substr(i-2, 2));
            if (twoDigit >= 10 && twoDigit <= 26) {
                dp[i] += dp[i-2];
            }
        }
        
        return dp[n];
    }
};
