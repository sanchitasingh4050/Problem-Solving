class Solution {
private:
    // Recursive function to count the number of ways friends can be paired
    long countPairs(int n, vector<long>& dp) {
        // Base case: If there are no friends, return 1 (empty pairing)
        if (n == 0)
            return 1;
        
        // If the value for 'n' is already calculated, return it from dp array
        if (dp[n] != -1)
            return dp[n];
        
        // Calculating the number of ways if the current friend is single
        long single = countPairs(n - 1, dp);
        
        // Calculating the number of ways if the current friend is paired with another friend
        long pair = 0;
        if (n - 2 >= 0)
            pair = countPairs(n - 2, dp) * (n - 1);
        
        // Store the result in dp array and return
        return dp[n] = (single + pair) % 1000000007;
    }
    
public:
    // Function to count the number of ways friends can be paired
    int countFriendsPairings(int n) {
        // Initializing a dp array to store intermediate results
        vector<long> dp(n + 1, -1);
        
        // Calling the recursive function to calculate the count of pairings
        return countPairs(n, dp);
    }
};
