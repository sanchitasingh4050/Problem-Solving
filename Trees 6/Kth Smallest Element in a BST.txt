class Solution {        //easy peasy
public:

    void inorder(TreeNode* root, vector<int>&v){
        if(root==NULL){ return;}
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }

    int kthSmallest(TreeNode* root, int k) {
    //we can perform the inorder traversal of this BST & then traverse to find the kth smallest element

    vector<int>v;
     inorder(root,v);
     return v[k-1]; //since inorder is always sorted, k^th means k-1^th index element
        
    }
};