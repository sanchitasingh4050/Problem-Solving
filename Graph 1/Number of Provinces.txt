class Solution {        //easy peasy // using dfs
public:
    void dfs(int node, vector<vector<int>>&adj, vector<int>&vis){
        vis[node]=1;
        for(auto it: adj[node]){    //for checking with connected components
            if(vis[it]==0){
                dfs(it, adj, vis);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
    int count=0;
    int n=isConnected.size();
    vector<int>vis(n,0);
    vector<vector<int>>adj(n);
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i!=j && isConnected[i][j]==1){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }

        }

    }
    for(int i=0;i<n;i++){
        if(vis[i]==0){
         count++;
        dfs(i, adj, vis);
    }
}
    return count;
        
    }
};