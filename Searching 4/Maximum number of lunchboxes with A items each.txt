#include <bits/stdc++.h>
using namespace std;

bool isPossible(int mid, unordered_map<int, int>& mp, int A) {    //mid-> no of lunch boxes
    int items_per_lb = 0;
    for (const auto& pair : mp) {
        items_per_lb += pair.second /mid;                        //no. of items per lunch box 
    }
    return items_per_lb>= A;                                  // Check if the number of items per lunch boxe is at least A
}

void findMaxLunchBoxes(int low, int high, int& answer, unordered_map<int, int>& mp, int A) {
    while (low <= high) {
        int mid = (high+low) / 2;
        if (isPossible(mid, mp, A)==true) {
            answer = max(answer, mid);
            low = mid + 1;
        } 
        else {
            high = mid - 1;
        }
    }
}

int main() {
    vector<int> nums;
    int n;
    int A;
    cout << "Enter no. of IDs" << endl;
    cin >> n;
    int ID;
    cout << "Enter IDs" << endl;
    for (int i = 0; i < n; i++) {
        cin >> ID;
        nums.push_back(ID);
    }
    cout << "Enter A" << endl;
    cin >> A;
    
    // Creating frequency map
    unordered_map<int, int> mp;
    for (const auto& num : nums) {
        mp[num]++;
    }
    
    // Finding the maximum number of lunch boxes
    int low = 1; 
    int high = INT_MIN;                          // Initializing  high to the minimum integer value
    for (const auto& pair : mp) {
        high = max(high, pair.second);           // Updating high to the maximum frequency
    }
    int answer = 0;
    findMaxLunchBoxes(low, high, answer, mp, A);
    
    cout << "max lunch boxes are: "<<answer;

    return 0;
}
