void left_t(TreeNode<int>* root, vector<int>& ans) {                          //easy peasy
        
        if (root == NULL || (root->left == NULL && root->right == NULL)) 
        {
            return;
        }
        ans.push_back(root->data);
        if (root->left) {
            left_t(root->left, ans);
        } 
        else {
            left_t(root->right, ans);
        }
    }

                                                        // function to collect leaf nodes of the tree
    void leaf(TreeNode<int>* root, vector<int>& ans) {
        if (root == NULL) {
            return;
        }
        if (root->left == NULL && root->right == NULL) {
            ans.push_back(root->data);
        }
        leaf(root->left, ans);
        leaf(root->right, ans);
    }

                                                             // function to traverse right boundary of the tree
    void right_t(TreeNode<int>* root, vector<int>& ans) {
        if (root == NULL || (root->left == NULL && root->right == NULL)) {
            return;
        }
        if (root->right) {
            right_t(root->right, ans);
        } else {
            right_t(root->left, ans);
        }
        ans.push_back(root->data);
    }

                                                         // Function to traverse the boundary of the tree
    vector<int> traverseBoundary(TreeNode<int>* root) {
        vector<int> ans;
        if (root == NULL) {
            return ans;
        }
        ans.push_back(root->data);
        left_t(root->left, ans);
        leaf(root->left, ans);
        leaf(root->right, ans);
        right_t(root->right, ans);
        return ans;
    }
