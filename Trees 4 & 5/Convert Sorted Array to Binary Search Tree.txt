class Solution{                                                //easy peasy
public:

TreeNode* constructBST(vector<int>& nums, int low, int high) { // using binary search
        if (low > high)                                        //base case
            return NULL;
        
        int mid = low + (high - low) / 2;
        TreeNode* root = new TreeNode(nums[mid]);              //making new node everytime
        
        root->left = constructBST(nums, low, mid - 1);         //left subtrees
        root->right = constructBST(nums, mid + 1, high);       //right subtrees
        
        return root;
    }

TreeNode* sortedArrayToBST(vector<int>& nums) {      //given func
                                                    //we are takin two pointers left & right to contruct left & right subtree
    int low=0;                                      //for left subtree
    int high = nums.size()-1;                       // for right subtree
        return constructBST(nums, low, high);
    }  
   
};