class Solution {
public:
    int solve(int n, int k, vector<int>& stalls) {   //easy peasy//using binary search
        sort(stalls.begin(), stalls.end());
        
        int low = 1;
        int high = stalls.back() - stalls[0];
        int result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (canPlaceCows(stalls, mid, k)) {
                result = mid;
                low = mid + 1;
            } 
            else {
                high = mid - 1;
            }
        }

        return result;
    }

private:
    bool canPlaceCows(const vector<int>& stalls, int distance, int cows) {
        int lastPosition = stalls[0];
        int count = 1;

        for (int i = 1; i < stalls.size(); ++i) {
            if (stalls[i] - lastPosition >= distance) {
                lastPosition = stalls[i];
                count++;
                if (count == cows) {
                    return true;
                }
            }
        }

        return false;
    }
};