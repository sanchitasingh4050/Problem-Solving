class Solution {
public:
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {
        int n = grid.size();
        int m = grid[0].size();
        
        // Initialize dp array to store the minimum cost to reach each cell
        vector<vector<int>> dp(n, vector<int>(m, INT_MAX));
        
        // The cost to reach the first row is just the cell values themselves
        dp[0] = grid[0];
        
        // Fill dp array for the rest of the rows
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                for (int k = 0; k < m; k++) {
                    // Update dp[i][j] with the minimum cost to reach cell (i, j)
                    dp[i][j] = min(dp[i][j], moveCost[grid[i - 1][k]][j] + dp[i - 1][k] + grid[i][j]);
                }
            }
        }
        
        // Return the minimum cost to reach any cell in the last row
        return *min_element(begin(dp[n - 1]), end(dp[n - 1]));
    }
};
