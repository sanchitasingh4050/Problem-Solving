class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if (obstacleGrid[0][0] == 1) // Check if the starting point is an obstacle
            return 0;

        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        obstacleGrid[0][0] = 1; // Set the starting point as reachable

        // Initialize the first column - if there's an obstacle, set the rest as unreachable
        for (int i = 1; i < m; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
        }

        // Initialize the first row - if there's an obstacle, set the rest as unreachable
        for (int j = 1; j < n; j++) {
            obstacleGrid[0][j] = (obstacleGrid[0][j] == 0 && obstacleGrid[0][j - 1] == 1) ? 1 : 0;
        }

        // Calculate number of paths for each cell (other than the 1st row & 1st column)
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                } 
                else 
                {
                    obstacleGrid[i][j] = 0; // If there's an obstacle, set paths to 0
                }
            }
        }

        return obstacleGrid[m - 1][n - 1];
    }
};